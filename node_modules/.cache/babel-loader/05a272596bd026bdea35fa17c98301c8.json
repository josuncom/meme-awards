{"ast":null,"code":"import { collection, getFirestore, getDocs, addDoc, doc, getDoc, setDoc } from \"firebase/firestore\";\nimport { Cookies } from \"react-cookie\";\nexport async function getData() {\n  const db = getFirestore();\n  const querySnapShot = await getDocs(collection(db, \"meme-awards\"));\n  querySnapShot.forEach(doc => {\n    console.log(doc.data());\n  });\n}\nexport async function setData() {\n  const ipData = await fetch('https://geolocation-db.com/json/'); // 위치 정보 조회\n  const locationIP = await ipData.json(); // 위치 정보에서 IP 주소 load\n  const IP = locationIP.IPv4;\n  const COOKIE_KEYS = 'isVoted';\n\n  // console.log(typeof(IP)); => string\n\n  const db = getFirestore();\n  const ipRef = doc(db, \"IP\", IP);\n  const ipSnap = await getDoc(ipRef);\n  if (ipSnap.exists()) {\n    console.log(\"이미 있음!\");\n  } else {\n    console.log(ipRef);\n    try {\n      await setDoc(ipRef, {\n        IP: IP\n      });\n      console.log(\"Document written with ID: \", ipData.id);\n    } catch (e) {\n      console.error(\"Error adding document: \", e);\n    }\n  }\n}","map":{"version":3,"names":["collection","getFirestore","getDocs","addDoc","doc","getDoc","setDoc","Cookies","getData","db","querySnapShot","forEach","console","log","data","setData","ipData","fetch","locationIP","json","IP","IPv4","COOKIE_KEYS","ipRef","ipSnap","exists","id","e","error"],"sources":["C:/Users/p-d0175/Desktop/meme-awards/src/Api.js"],"sourcesContent":["import { collection, getFirestore, getDocs, addDoc, doc, getDoc, setDoc } from \"firebase/firestore\";\r\nimport { Cookies } from \"react-cookie\";\r\n\r\n\r\nexport async function getData() {\r\n    const db = getFirestore();\r\n    const querySnapShot = await getDocs(collection(db, \"meme-awards\"));\r\n    querySnapShot.forEach((doc) => {\r\n        console.log(doc.data());\r\n    })\r\n}\r\n\r\nexport async function setData() {\r\n    const ipData = await fetch('https://geolocation-db.com/json/'); // 위치 정보 조회\r\n    const locationIP = await ipData.json(); // 위치 정보에서 IP 주소 load\r\n    const IP = locationIP.IPv4;\r\n    const COOKIE_KEYS = 'isVoted';\r\n\r\n    // console.log(typeof(IP)); => string\r\n\r\n    const db = getFirestore();\r\n    const ipRef = doc(db, \"IP\", IP);\r\n    const ipSnap = await getDoc(ipRef); \r\n\r\n    if (ipSnap.exists()) {\r\n        console.log(\"이미 있음!\");\r\n      } else {\r\n        console.log(ipRef);\r\n        try {\r\n            await setDoc(ipRef, {\r\n                IP : IP\r\n            });\r\n            console.log(\"Document written with ID: \", ipData.id);\r\n          } catch (e) {\r\n            console.error(\"Error adding document: \", e);\r\n          }\r\n    }\r\n}"],"mappings":"AAAA,SAASA,UAAU,EAAEC,YAAY,EAAEC,OAAO,EAAEC,MAAM,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AACnG,SAASC,OAAO,QAAQ,cAAc;AAGtC,OAAO,eAAeC,OAAO,GAAG;EAC5B,MAAMC,EAAE,GAAGR,YAAY,EAAE;EACzB,MAAMS,aAAa,GAAG,MAAMR,OAAO,CAACF,UAAU,CAACS,EAAE,EAAE,aAAa,CAAC,CAAC;EAClEC,aAAa,CAACC,OAAO,CAAEP,GAAG,IAAK;IAC3BQ,OAAO,CAACC,GAAG,CAACT,GAAG,CAACU,IAAI,EAAE,CAAC;EAC3B,CAAC,CAAC;AACN;AAEA,OAAO,eAAeC,OAAO,GAAG;EAC5B,MAAMC,MAAM,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;EAChE,MAAMC,UAAU,GAAG,MAAMF,MAAM,CAACG,IAAI,EAAE,CAAC,CAAC;EACxC,MAAMC,EAAE,GAAGF,UAAU,CAACG,IAAI;EAC1B,MAAMC,WAAW,GAAG,SAAS;;EAE7B;;EAEA,MAAMb,EAAE,GAAGR,YAAY,EAAE;EACzB,MAAMsB,KAAK,GAAGnB,GAAG,CAACK,EAAE,EAAE,IAAI,EAAEW,EAAE,CAAC;EAC/B,MAAMI,MAAM,GAAG,MAAMnB,MAAM,CAACkB,KAAK,CAAC;EAElC,IAAIC,MAAM,CAACC,MAAM,EAAE,EAAE;IACjBb,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACvB,CAAC,MAAM;IACLD,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC;IAClB,IAAI;MACA,MAAMjB,MAAM,CAACiB,KAAK,EAAE;QAChBH,EAAE,EAAGA;MACT,CAAC,CAAC;MACFR,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEG,MAAM,CAACU,EAAE,CAAC;IACtD,CAAC,CAAC,OAAOC,CAAC,EAAE;MACVf,OAAO,CAACgB,KAAK,CAAC,yBAAyB,EAAED,CAAC,CAAC;IAC7C;EACN;AACJ"},"metadata":{},"sourceType":"module"}